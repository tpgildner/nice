<html>
<head>
  <title>Array Flatten</title>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js"></script>
  <script type="text/javascript">

  $(document).ready(function(){
    // Flatten a given array. So for [1, [2,3], 4, []] return [1,2,3,4]
    function flatten(arr){
      return rflatten(arr);

      function rflatten(arr){
        var flattened =[];
        for(var i=0; i<arr.length;i++){
          if(Array.isArray(arr[i])){
            console.log('hi');
            flattened.concat(rflatten(arr[i]));
          } else{
            flattened.push(arr[i]);
          }
        }
        return flattened; //TO-DO: this test case below doesn't work! Missing [2,3] ??? Fix??
        //Note this is a classmate's answer to recursively account for infinite numbers of arrays inside the array
      }
    }

    //Test case below:
    console.log(flatten([1, [2,3], 4, []]));


    function myFlatten(arr){
      var new_arr=[];
      for (var i=0; i<arr.length; i++){
        if (Array.isArray(arr[i])){
          for (var x=0;x<arr[i].length;x++){
            new_arr.push(arr[i][x]);
          }
        }
        else{    new_arr.push(arr[i]); }
      }
      return new_arr;
    }

    console.log(myFlatten([1, [2,3], 4, []]));


    //Create a second iteration where you work in-place but you don't have to keep the order of the original array


    function flattenv2(arr){
      var counter=0;
      for (var i=0; i<arr.length;i++){
        if(Array.isArray(arr[i])){
          for(x=0;x<arr[i].length;x++){
            counter++;
          }
        }
        else{ counter++; }
        }

      for (var i=0; i<counter;i++){
        while (Array.isArray(arr[i])){
          var temp=arr[i];
          arr[i]=arr[arr.length-1];
          arr[arr.length-1]=temp;
          temp=arr.pop();
          for(var x=0; x<temp.length;x++){
            arr.push(temp[x]);
          }
        }
      }
      return arr;
    }

    console.log(flattenv2([1, [2,3], 4, []]));

    //TO-DO: Create a 3rd iteration where you work in-place and it's stable. (aka, you keep the original order)

  });


  </script>
</head>
<body>

</body>
</html>
